{"ast":null,"code":"var _jsxFileName = \"/Users/okienayonoadu/ProjectVitality/projectvitality/src/Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\"; //import \"./Home.css\";\n\nimport logo from \"./logo.svg\";\nimport Post from \"./Post\";\nimport { auth } from \"./firebase\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Modal from \"@material-ui/core/Modal\";\nimport { Input } from \"@material-ui/core\";\nimport AccountCircleOutlinedIcon from \"@material-ui/icons/AccountCircleOutlined\";\nimport EmailOutlinedIcon from \"@material-ui/icons/EmailOutlined\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport BottomNavigation from \"@material-ui/core/BottomNavigation\";\nimport HomeOutlinedIcon from \"@material-ui/icons/HomeOutlined\";\nimport AddBoxOutlinedIcon from \"@material-ui/icons/AddBoxOutlined\";\nimport BottomNavigationAction from \"@material-ui/core/BottomNavigationAction\";\nimport { Link } from \"react-router-dom\";\nimport \"./ImageUpload.css\"; //import Button from '@material-ui/core/Button';\n\n/*Styling for modal. Code from material-ui.com*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`\n  };\n}\n\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    position: \"absolute\",\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3)\n  }\n}));\n\nfunction Home() {\n  _s();\n\n  /*states...how you set variables in react*/\n  const classes = useStyles(); // getModalStyle is not a pure function, we roll the style only on the first render\n\n  const [modalStyle] = useState(getModalStyle);\n  const [posts] = useState([]);\n  const [open, setOpen] = useState(false);\n  const [openSignIn, setOpenSignIn] = useState(false);\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [user, setUser] = useState(null); //state to keep track of the user\n\n  const [openAdmin, setOpenAdmin] = useState(false); //IMAGE UPLOAD STATES\n\n  const [openP, setOpenP] = useState(false);\n  const [caption, setCaption] = useState(\"\");\n  const [, setImage] = useState(null); //state for the progress bar\n\n  const [progress] = useState(0);\n  const [openProgress, setOpenProgress] = useState(false); //progress bar state\n\n  const [] = React.useState(\"\"); //const [, setOpenDropDown] = React.useState(false);\n  //imageupload functions\n\n  const handleChange = e => {\n    //handleChange function fires off an event\n    if (e.target.files[0]) {\n      //get the first file you selected\n      setImage(e.target.files[0]); //set the image in state to that file\n    }\n  };\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(authUser => {\n      //listen anytime an authentication change happens\n      if (authUser) {\n        //user has logged in...\n        console.log(authUser); //check the console if someone is there or not\n\n        setUser(authUser); //Cookie tracking to keep you logged in. Captures the user in our state.\n\n        if (authUser.displayName) {//dont update username if they dont have a display name\n        } else {\n          // if we just created someone...\n          return authUser.updateProfile({\n            displayName: username //set their display name in firebase\n\n          });\n        }\n      } else {\n        // user has logged out...\n        setUser(null);\n      }\n    });\n    return () => {\n      //perform some cleanup actions before restarting the useEffect. This to avoid duplicate listeners.\n      unsubscribe();\n    };\n  }, [user, username]); //sign up function. Fired up by the button\n\n  const signUp = event => {\n    event.preventDefault(); //avoid refresh when sign up button is clicked\n    //verify email\n\n    auth.onAuthStateChanged(function (firebaseUser) {\n      if (firebaseUser) {\n        firebaseUser.sendEmailVerification().then(function () {// Email sent.\n          //alert(\"Your email verification code has been sent\")\n        }, function (error) {\n          // An error happened.\n          alert(error.message);\n        });\n      } else {}\n    });\n    auth.createUserWithEmailAndPassword(email, password) //create user\n    .then(authUser => {\n      return authUser.user.updateProfile({\n        displayName: username\n      });\n    }) //backend validation is done by firebase\n    .catch(error => alert(error.message)); //alert of any errors with a message\n\n    setOpen(false); //close modal after signing up\n  }; //sign in function. Fired up by the button\n\n\n  const signIn = event => {\n    event.preventDefault(); //avoid refresh when sign in button is clicked\n\n    auth.signInWithEmailAndPassword(email, password) //backend validation is done by firebase\n    .catch(error => alert(error.message)); //alert of any errors with a message\n\n    setOpenSignIn(false); //close modal after signing in\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(Modal //Sign up Modal\n    , {\n      open: open //state to keep track if its open\n      ,\n      onClose: () => setOpen(false) //onClose method. closes the model when anywhere else on the screen is clicked\n      ,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: modalStyle,\n        className: classes.paper,\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"app__signup\",\n          children: [/*#__PURE__*/_jsxDEV(\"center\", {\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"app__headerImage\",\n              src: logo,\n              alt: \"\",\n              width: \"50px\",\n              height: \"50px\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(AccountCircleOutlinedIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            placeholder: \"username\",\n            type: \"text\",\n            value: username,\n            onChange: e => setUsername(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(EmailOutlinedIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            placeholder: \"email\",\n            type: \"text\",\n            value: email,\n            onChange: e => setEmail(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(LockOutlinedIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            placeholder: \"password\",\n            type: \"password\",\n            value: password,\n            onChange: e => setPassword(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            onClick: signUp,\n            children: \"Sign Up\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal //Sign Out and Login Modal\n    , {\n      open: openSignIn //state to keep track if its open\n      ,\n      onClose: () => setOpenSignIn(false) //onClose method. closes the model when anywhere else on the screen is clicked\n      ,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: modalStyle,\n        className: classes.paper,\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"app__signup\",\n          children: [/*#__PURE__*/_jsxDEV(\"center\", {\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"app__headerImage\",\n              src: logo,\n              alt: \"\",\n              width: \"100px\",\n              height: \"100px\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(EmailOutlinedIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            placeholder: \"email\",\n            type: \"text\",\n            value: email,\n            onChange: e => setEmail(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(LockOutlinedIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            placeholder: \"password\",\n            type: \"password\",\n            value: password,\n            onChange: e => setPassword(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            onClick: signIn,\n            children: \"Sign In\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      open: openP //state to keep track if its open\n      ,\n      onClose: () => setOpenP(false) //onClose method. closes the model when anywhere else on the screen is clicked\n      ,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: modalStyle,\n        className: classes.paper,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"imageupload\",\n          children: [/*#__PURE__*/_jsxDEV(\"center\", {\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"app__headerImage\",\n              src: logo,\n              alt: \"\",\n              width: \"50px\",\n              height: \"50px\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Enter a caption...\",\n            onChange: event => setCaption(event.target.value),\n            value: caption\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            id: \"nudge\",\n            onClick: geoFunction,\n            children: \"Request GPS\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleUpload,\n            children: \"Upload\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      open: openProgress //state to keep track if its open\n      ,\n      onClose: () => setOpenProgress(false) //onClose method. closes the model when anywhere else on the screen is clicked\n      ,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: modalStyle,\n        className: classes.paper,\n        children: /*#__PURE__*/_jsxDEV(\"progress\", {\n          className: \"imageupload__progress\",\n          value: progress,\n          max: \"100\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app__header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"app__headerImage\",\n        src: logo,\n        alt: \"\",\n        width: \"60px\",\n        height: \"60px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal //Sign Out and Login Modal\n      , {\n        open: openAdmin //state to keep track if its open\n        ,\n        onClose: () => setOpenAdmin(false) //onClose method. closes the model when anywhere else on the screen is clicked\n        ,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: modalStyle,\n          className: classes.paper,\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            className: \"app__signup\",\n            children: [/*#__PURE__*/_jsxDEV(\"center\", {\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                className: \"app__headerImage\",\n                src: logo,\n                alt: \"\",\n                width: \"100px\",\n                height: \"100px\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 336,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(LockOutlinedIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 344,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              placeholder: \"Authorization Code\",\n              id: \"pass\",\n              type: \"password\",\n              value: password,\n              onChange: e => setPassword(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 345,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              onClick: myFunction,\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 352,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 9\n      }, this), (user === null || user === void 0 ? void 0 : user.displayName) ?\n      /*#__PURE__*/\n      //if the user exists, show a Logout button\n      _jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setOpenAdmin(true),\n          children: \"Admin\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => auth.signOut(),\n          children: \"Logout\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 11\n      }, this) :\n      /*#__PURE__*/\n      //else, show a sign up button\n      _jsxDEV(\"div\", {\n        className: \"app__loginContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setOpenSignIn(true),\n          children: \"Sign In\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setOpen(true),\n          children: \"Sign Up\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app__posts\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app_postsRight\",\n        children:\n        /*loop through posts in state*/\n        posts.map(({\n          id,\n          post\n        }) =>\n        /*#__PURE__*/\n        //the key allows the page to only refresh the new post, not all the posts. since each post has its own key\n        _jsxDEV(Post, {\n          postId: id,\n          user: user,\n          username: post.username,\n          caption: post.caption,\n          imageUrl: post.imageUrl,\n          keyword: post.keyword,\n          address: post.address\n        }, id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 7\n    }, this), (user === null || user === void 0 ? void 0 : user.displayName) ?\n    /*#__PURE__*/\n    //access only when user is signed in\n    _jsxDEV(\"div\", {\n      className: \"app__bottom\",\n      children: /*#__PURE__*/_jsxDEV(BottomNavigation // showLabels\n      // className={classes.root}\n      , {\n        children: [/*#__PURE__*/_jsxDEV(BottomNavigationAction, {\n          label: \"Home\",\n          icon: /*#__PURE__*/_jsxDEV(HomeOutlinedIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 405,\n            columnNumber: 21\n          }, this),\n          component: Link,\n          to: \"/\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(BottomNavigationAction, {\n          label: \"Post\",\n          icon: /*#__PURE__*/_jsxDEV(AddBoxOutlinedIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 411,\n            columnNumber: 21\n          }, this),\n          component: Link,\n          onClick: () => setOpenP(true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(BottomNavigationAction, {\n          label: \"Profile\",\n          icon: /*#__PURE__*/_jsxDEV(AccountCircleOutlinedIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 21\n          }, this),\n          component: Link,\n          to: \"/Profile\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"h7\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 9\n    }, this) //hide navigation bar when user is not signed in\n    ]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Home, \"wjg5vSKPQstILGikpCxsqb+sX7Y=\", false, function () {\n  return [useStyles];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/okienayonoadu/ProjectVitality/projectvitality/src/Home.js"],"names":["React","useState","useEffect","Post","auth","makeStyles","Modal","Input","AccountCircleOutlinedIcon","EmailOutlinedIcon","LockOutlinedIcon","BottomNavigation","HomeOutlinedIcon","AddBoxOutlinedIcon","BottomNavigationAction","Link","getModalStyle","top","left","transform","useStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","Home","classes","modalStyle","posts","open","setOpen","openSignIn","setOpenSignIn","username","setUsername","password","setPassword","email","setEmail","user","setUser","openAdmin","setOpenAdmin","openP","setOpenP","caption","setCaption","setImage","progress","openProgress","setOpenProgress","handleChange","e","target","files","unsubscribe","onAuthStateChanged","authUser","console","log","displayName","updateProfile","signUp","event","preventDefault","firebaseUser","sendEmailVerification","then","error","alert","message","createUserWithEmailAndPassword","catch","signIn","signInWithEmailAndPassword","logo","value","geoFunction","handleUpload","myFunction","signOut","map","id","post","imageUrl","keyword","address"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\n//import \"./Home.css\";\nimport logo from \"./logo.svg\";\nimport Post from \"./Post\";\nimport { auth } from \"./firebase\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Modal from \"@material-ui/core/Modal\";\nimport { Input } from \"@material-ui/core\";\nimport AccountCircleOutlinedIcon from \"@material-ui/icons/AccountCircleOutlined\";\nimport EmailOutlinedIcon from \"@material-ui/icons/EmailOutlined\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport BottomNavigation from \"@material-ui/core/BottomNavigation\";\nimport HomeOutlinedIcon from \"@material-ui/icons/HomeOutlined\";\nimport AddBoxOutlinedIcon from \"@material-ui/icons/AddBoxOutlined\";\nimport BottomNavigationAction from \"@material-ui/core/BottomNavigationAction\";\n\nimport { Link } from \"react-router-dom\";\n\nimport \"./ImageUpload.css\";\n\n//import Button from '@material-ui/core/Button';\n\n/*Styling for modal. Code from material-ui.com*/\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: \"absolute\",\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nfunction Home() {\n  /*states...how you set variables in react*/\n  const classes = useStyles();\n  // getModalStyle is not a pure function, we roll the style only on the first render\n  const [modalStyle] = useState(getModalStyle);\n\n  const [posts] = useState([]);\n  const [open, setOpen] = useState(false);\n  const [openSignIn, setOpenSignIn] = useState(false);\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [user, setUser] = useState(null); //state to keep track of the user\n  const [openAdmin, setOpenAdmin] = useState(false);\n\n  //IMAGE UPLOAD STATES\n  const [openP, setOpenP] = useState(false);\n  const [caption, setCaption] = useState(\"\");\n  const [, setImage] = useState(null); //state for the progress bar\n\n  const [progress] = useState(0);\n  const [openProgress, setOpenProgress] = useState(false); //progress bar state\n\n  const [] = React.useState(\"\");\n  //const [, setOpenDropDown] = React.useState(false);\n\n  //imageupload functions\n  const handleChange = (e) => {\n    //handleChange function fires off an event\n    if (e.target.files[0]) {\n      //get the first file you selected\n      setImage(e.target.files[0]); //set the image in state to that file\n    }\n  };\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged((authUser) => {\n      //listen anytime an authentication change happens\n      if (authUser) {\n        //user has logged in...\n        console.log(authUser); //check the console if someone is there or not\n        setUser(authUser); //Cookie tracking to keep you logged in. Captures the user in our state.\n\n        if (authUser.displayName) {\n          //dont update username if they dont have a display name\n        } else {\n          // if we just created someone...\n          return authUser.updateProfile({\n            displayName: username, //set their display name in firebase\n          });\n        }\n      } else {\n        // user has logged out...\n        setUser(null);\n      }\n    });\n\n    return () => {\n      //perform some cleanup actions before restarting the useEffect. This to avoid duplicate listeners.\n      unsubscribe();\n    };\n  }, [user, username]);\n\n  //sign up function. Fired up by the button\n  const signUp = (event) => {\n    event.preventDefault(); //avoid refresh when sign up button is clicked\n\n    //verify email\n    auth.onAuthStateChanged(function (firebaseUser) {\n      if (firebaseUser) {\n        firebaseUser.sendEmailVerification().then(\n          function () {\n            // Email sent.\n            //alert(\"Your email verification code has been sent\")\n          },\n          function (error) {\n            // An error happened.\n            alert(error.message);\n          }\n        );\n      } else {\n      }\n    });\n\n    auth\n      .createUserWithEmailAndPassword(email, password) //create user\n      .then((authUser) => {\n        return authUser.user.updateProfile({\n          displayName: username,\n        });\n      })\n      //backend validation is done by firebase\n      .catch((error) => alert(error.message)); //alert of any errors with a message\n\n    setOpen(false); //close modal after signing up\n  };\n\n  //sign in function. Fired up by the button\n  const signIn = (event) => {\n    event.preventDefault(); //avoid refresh when sign in button is clicked\n\n    auth\n      .signInWithEmailAndPassword(email, password)\n      //backend validation is done by firebase\n      .catch((error) => alert(error.message)); //alert of any errors with a message\n\n    setOpenSignIn(false); //close modal after signing in\n  };\n\n  return (\n    <div className=\"app\">\n      {/*using BEM naming convetion*/}\n\n      {/* \n      {user?.displayName ?(//access only when user is signed in\n        <ImageUpload username={user.displayName} />\n      ):\n      (\n          <h7>Sorry you need to login to upload</h7>\n      )} \n */}\n\n      <Modal //Sign up Modal\n        open={open} //state to keep track if its open\n        onClose={() => setOpen(false)} //onClose method. closes the model when anywhere else on the screen is clicked\n      >\n        <div style={modalStyle} className={classes.paper}>\n          <form className=\"app__signup\">\n            <center>\n              <img\n                className=\"app__headerImage\"\n                src={logo}\n                alt=\"\"\n                width=\"50px\"\n                height=\"50px\"\n              />\n            </center>\n\n            <AccountCircleOutlinedIcon />\n            <Input\n              placeholder=\"username\"\n              type=\"text\"\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}\n            />\n            <EmailOutlinedIcon />\n            <Input\n              placeholder=\"email\"\n              type=\"text\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n            />\n            <LockOutlinedIcon />\n            <Input\n              placeholder=\"password\"\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n            />\n            <button type=\"submit\" onClick={signUp}>\n              Sign Up\n            </button>\n          </form>\n        </div>\n      </Modal>\n\n      <Modal //Sign Out and Login Modal\n        open={openSignIn} //state to keep track if its open\n        onClose={() => setOpenSignIn(false)} //onClose method. closes the model when anywhere else on the screen is clicked\n      >\n        <div style={modalStyle} className={classes.paper}>\n          <form className=\"app__signup\">\n            <center>\n              <img\n                className=\"app__headerImage\"\n                src={logo}\n                alt=\"\"\n                width=\"100px\"\n                height=\"100px\"\n              />\n            </center>\n\n            <EmailOutlinedIcon />\n            <Input\n              placeholder=\"email\"\n              type=\"text\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n            />\n\n            <LockOutlinedIcon />\n            <Input\n              placeholder=\"password\"\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n            />\n\n            <button type=\"submit\" onClick={signIn}>\n              Sign In\n            </button>\n          </form>\n        </div>\n      </Modal>\n\n      {/* modal for posting*/}\n      <Modal\n        open={openP} //state to keep track if its open\n        onClose={() => setOpenP(false)} //onClose method. closes the model when anywhere else on the screen is clicked\n      >\n        <div style={modalStyle} className={classes.paper}>\n          <div className=\"imageupload\">\n            <center>\n              <img\n                className=\"app__headerImage\"\n                src={logo}\n                alt=\"\"\n                width=\"50px\"\n                height=\"50px\"\n              />\n            </center>\n            {/* <FormControl className={classes.formControl}>\n              <InputLabel id=\"demo-controlled-open-select-label\">\n                Choose a keyword\n              </InputLabel>\n              <Select\n                labelId=\"demo-controlled-open-select-label\"\n                id=\"demo-controlled-open-select\"\n                open={openDropDown}\n                onClose={handleCloseDropDown}\n                onOpen={handleOpenDropDown}\n                value={keyword}\n                onChange={handleChangeDropDown}\n              >\n                <MenuItem value=\"\">\n                  <em>--Choose a keyword--</em>\n                </MenuItem>\n                <MenuItem value={\"Pothole\"}>Pothole</MenuItem>\n                <MenuItem value={\"Water Spill\"}>Water Spill</MenuItem>\n                <MenuItem value={\"Sinkhole\"}>Sinkhole</MenuItem>\n              </Select>\n            </FormControl> */}\n\n            <input\n              type=\"text\"\n              placeholder=\"Enter a caption...\"\n              onChange={(event) => setCaption(event.target.value)}\n              value={caption}\n            />\n            <button type=\"submit\" id=\"nudge\" onClick={geoFunction}>\n              Request GPS\n            </button>\n            <input type=\"file\" onChange={handleChange} />\n\n            <button onClick={handleUpload}>Upload</button>\n          </div>\n        </div>\n      </Modal>\n\n      <Modal\n        open={openProgress} //state to keep track if its open\n        onClose={() => setOpenProgress(false)} //onClose method. closes the model when anywhere else on the screen is clicked\n      >\n        <div style={modalStyle} className={classes.paper}>\n          <progress\n            className=\"imageupload__progress\"\n            value={progress}\n            max=\"100\"\n          />\n        </div>\n      </Modal>\n\n      <div className=\"app__header\">\n        <img\n          className=\"app__headerImage\"\n          src={logo}\n          alt=\"\"\n          width=\"60px\"\n          height=\"60px\"\n        />\n\n        {/* modal for admin*/}\n\n        <Modal //Sign Out and Login Modal\n          open={openAdmin} //state to keep track if its open\n          onClose={() => setOpenAdmin(false)} //onClose method. closes the model when anywhere else on the screen is clicked\n        >\n          <div style={modalStyle} className={classes.paper}>\n            <form className=\"app__signup\">\n              <center>\n                <img\n                  className=\"app__headerImage\"\n                  src={logo}\n                  alt=\"\"\n                  width=\"100px\"\n                  height=\"100px\"\n                />\n              </center>\n              <LockOutlinedIcon />\n              <Input\n                placeholder=\"Authorization Code\"\n                id=\"pass\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n              />\n              <button type=\"submit\" onClick={myFunction}>\n                Submit\n              </button>\n            </form>\n          </div>\n        </Modal>\n        {/**********************************************NEWWWWWWWWW***********************************************************************/}\n\n        {user?.displayName ? ( //if the user exists, show a Logout button\n          <div>\n            {/* <button>Are you an Admin??</button> */}\n            <button onClick={() => setOpenAdmin(true)}>Admin</button>\n            <button onClick={() => auth.signOut()}>Logout</button>\n          </div>\n        ) : (\n          //else, show a sign up button\n          <div className=\"app__loginContainer\">\n            <button onClick={() => setOpenSignIn(true)}>Sign In</button>\n            <button onClick={() => setOpen(true)}>Sign Up</button>\n          </div>\n        )}\n      </div>\n\n      <div className=\"app__posts\">\n        <div className=\"app_postsRight\">\n          {/*Posts*/}\n          {\n            /*loop through posts in state*/\n            posts.map(({ id, post }) => (\n              //the key allows the page to only refresh the new post, not all the posts. since each post has its own key\n              <Post\n                key={id}\n                postId={id}\n                user={user}\n                username={post.username}\n                caption={post.caption}\n                imageUrl={post.imageUrl}\n                keyword={post.keyword}\n                address={post.address}\n              ></Post>\n            ))\n          }\n        </div>\n      </div>\n\n      {user?.displayName ? ( //access only when user is signed in\n        <div className=\"app__bottom\">\n          <BottomNavigation\n          // showLabels\n          // className={classes.root}\n          >\n            <BottomNavigationAction\n              label=\"Home\"\n              icon={<HomeOutlinedIcon />}\n              component={Link}\n              to=\"/\"\n            />\n            <BottomNavigationAction\n              label=\"Post\"\n              icon={<AddBoxOutlinedIcon />}\n              component={Link}\n              onClick={() => setOpenP(true)}\n            />\n            {/* <BottomNavigationAction\n              label=\"Nav\"\n              icon={<NotificationsNoneOutlinedIcon />}\n              component={Link}\n            /> */}\n            <BottomNavigationAction\n              label=\"Profile\"\n              icon={<AccountCircleOutlinedIcon />}\n              component={Link}\n              to=\"/Profile\"\n            />\n          </BottomNavigation>\n        </div>\n      ) : (\n        <h7></h7> //hide navigation bar when user is not signed in\n      )}\n    </div>\n  );\n}\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}