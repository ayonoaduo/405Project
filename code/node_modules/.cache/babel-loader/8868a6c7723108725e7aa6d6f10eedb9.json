{"ast":null,"code":"var _jsxFileName = \"/Users/okienayonoadu/ProjectVitality/projectvitality/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport Authentication from \"./authentication/Authentication\";\nimport { BrowserRouter as Router, Switch } from \"react-router-dom\";\nimport { auth } from \"./firebase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [user, setUser] = useState(null); //state to keep track of the user\n\n  const [username, setUsername] = useState(\"\");\n  const [resetPass, setResetPass] = useState(false); //state to check if the user wants to reset password\n\n  const [signInYes, setSignIn] = useState(true); // state to check if the user wants to sign in\n\n  const [signUpYes, setSignUp] = useState(false); //state to check if the user wants to sign up\n\n  const [] = useState(0);\n  const [] = React.useState(\"\");\n  const emailRef = useRef(null);\n  const passwordRef = useRef(null);\n  useEffect(() => {\n    //listener for any authentication state change\n    const unsubscribe = auth.onAuthStateChanged(authUser => {\n      if (authUser) {\n        //user has logged in..\n        console.log(authUser); //check the console if someone is logged in\n\n        setUser(authUser); //cookie tracking to keep you logged in\n\n        if (authUser.displayName) {//dont update the username if they dont have a display name\n        } else {\n          //if we just created someone...\n          return authUser.updateProfile({\n            displayName: username //set the display name in firebase\n\n          });\n        }\n      } else {\n        //user logged out...\n        setUser(null);\n      }\n    });\n    return () => {\n      //perform some cleanup actions before restarting useEffect to avoid\n      //duplicate listeners\n      unsubscribe();\n    };\n  }, [user, username]); //function \"register\" is fired up when the user tries to sign up\n\n  const register = e => {\n    e.preventDefault(); //prevent refresh when button is clicked\n\n    auth.createUserWithEmailAndPassword(emailRef.current.value, //get the email value typed\n    passwordRef.current.value //get the password\n    ) //send Email verification\n    .then(function (authData) {\n      authData.user.sendEmailVerification();\n    }, //if email wasnt sent\n    function (error) {\n      //An error happened\n      alert(error.message);\n    }).then(authUser => {\n      console.log(authUser);\n    }).catch(error => {\n      alert(error.message);\n    });\n  };\n\n  const signIn = e => {\n    e.preventDefault();\n    auth.signInWithEmailAndPassword(emailRef.current.value, passwordRef.current.value).then(authUser => {\n      console.log(authUser);\n    }).catch(error => alert(error.message));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: /*#__PURE__*/_jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Switch, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"UW6V7D7GYoJHKtFYt67uYtgAE9w=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/okienayonoadu/ProjectVitality/projectvitality/src/App.js"],"names":["React","useEffect","useState","useRef","Authentication","BrowserRouter","Router","Switch","auth","App","user","setUser","username","setUsername","resetPass","setResetPass","signInYes","setSignIn","signUpYes","setSignUp","emailRef","passwordRef","unsubscribe","onAuthStateChanged","authUser","console","log","displayName","updateProfile","register","e","preventDefault","createUserWithEmailAndPassword","current","value","then","authData","sendEmailVerification","error","alert","message","catch","signIn","signInWithEmailAndPassword"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport Authentication from \"./authentication/Authentication\";\nimport { BrowserRouter as Router, Switch } from \"react-router-dom\";\nimport { auth } from \"./firebase\";\n\nfunction App() {\n  const [user, setUser] = useState(null); //state to keep track of the user\n  const [username, setUsername] = useState(\"\");\n  const [resetPass, setResetPass] = useState(false); //state to check if the user wants to reset password\n  const [signInYes, setSignIn] = useState(true); // state to check if the user wants to sign in\n  const [signUpYes, setSignUp] = useState(false); //state to check if the user wants to sign up\n  const [] = useState(0);\n  const [] = React.useState(\"\");\n  const emailRef = useRef(null);\n  const passwordRef = useRef(null);\n\n  useEffect(() => {\n    //listener for any authentication state change\n    const unsubscribe = auth.onAuthStateChanged((authUser) => {\n      if (authUser) {\n        //user has logged in..\n        console.log(authUser); //check the console if someone is logged in\n        setUser(authUser); //cookie tracking to keep you logged in\n\n        if (authUser.displayName) {\n          //dont update the username if they dont have a display name\n        } else {\n          //if we just created someone...\n          return authUser.updateProfile({\n            displayName: username, //set the display name in firebase\n          });\n        }\n      } else {\n        //user logged out...\n        setUser(null);\n      }\n    });\n    return () => {\n      //perform some cleanup actions before restarting useEffect to avoid\n      //duplicate listeners\n      unsubscribe();\n    };\n  }, [user, username]);\n\n  //function \"register\" is fired up when the user tries to sign up\n  const register = (e) => {\n    e.preventDefault(); //prevent refresh when button is clicked\n\n    auth\n      .createUserWithEmailAndPassword(\n        emailRef.current.value, //get the email value typed\n        passwordRef.current.value //get the password\n      )\n      //send Email verification\n      .then(\n        function (authData) {\n          authData.user.sendEmailVerification();\n        },\n        //if email wasnt sent\n        function (error) {\n          //An error happened\n          alert(error.message);\n        }\n      )\n\n      .then((authUser) => {\n        console.log(authUser);\n      })\n      .catch((error) => {\n        alert(error.message);\n      });\n  };\n\n  const signIn = (e) => {\n    e.preventDefault();\n    auth\n      .signInWithEmailAndPassword(\n        emailRef.current.value,\n        passwordRef.current.value\n      )\n      .then((authUser) => {\n        console.log(authUser);\n      })\n      .catch((error) => alert(error.message));\n  };\n\n  return (\n    <div className=\"app\">\n      <Router>\n        <div>\n          <Switch>\n            {/*             \n            <Authentication\n              signUpYes={signUpYes}\n              setSignUp={setSignUp}\n              signInYes={signInYes}\n              setSignIn={setSignIn}\n              signIn={signIn}\n              register={register}\n              setUsername={setUsername}\n              username={username}\n              emailRef={emailRef}\n              passwordRef={passwordRef}\n              resetPass={resetPass}\n              setResetPass={setResetPass}\n            /> */}\n          </Switch>\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}